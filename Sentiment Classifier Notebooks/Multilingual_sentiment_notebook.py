# -*- coding: utf-8 -*-
"""Multilingual XLM-RoBERTA sentiment classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Mr22xsCYNPNNw5FFZ5GxvOzrxxVflY4
"""

# This sentiment analysis program is modeled off the BERT tutorial by Chris McCormick and Nick Ryan found here: 
# https://colab.research.google.com/drive/1pTuQhug6Dhl9XalKB0zUGf4FIdYFlpcX

# Citation: 
# Chris McCormick and Nick Ryan. (2019, July 22). BERT Fine-Tuning Tutorial with PyTorch. Retrieved from http://www.mccormickml.com

# For questions regarding fair usage of this notebook, please contact the secondary author at [EMAIL REMOVED] and the source coauthor at chris.mccormick@nearist.ai

import torch

# If there's a GPU available...
if torch.cuda.is_available():    

    # Tell PyTorch to use the GPU, and specify which one to use (if applicable).    
    device = torch.device("cuda")

    print('There are %d GPU(s) available.' % torch.cuda.device_count())

    print('We will use the GPU:', torch.cuda.get_device_name(0))

# If not...
else:
    print('No GPU available, using the CPU instead.')
    device = torch.device("cpu")

import numpy as np # data structure library
import math # handy for operations we'll be using
import time # used in running a timer during our training phase
import re # used for searching text and identifying patterns therein (see documentation: https://docs.python.org/3/library/re.html)
from bs4 import BeautifulSoup # used in reading data from text files and cleaning it up

# The library we'll be using to import and build our model (XLMRobertaForSequenceClassification)
!pip install transformers

# Used for manipulating data files
import pandas as pd

# Training/validation/test data can be found here: http://help.sentiment140.com/for-students/

features = ["sentiment", "id", "date", "query", "user", "text"] # The column names for the spreadsheet we're reading
train_data = pd.read_csv("Data/training.csv", header=None, names=features, engine='python', encoding='latin1') # Note encoding: latin1 is NOT recommended for other European languages
test_data = pd.read_csv("Data/test.csv", header=None, names=features, engine='python', encoding='latin1')

print('Number of training sentences: {:,}\n'.format(train_data.shape[0])) # Should be 1.6M
print('Number of test sentences: {:,}\n'.format(test_data.shape[0])) # Should be 498

train_data.drop(["id", "date", "query", "user"], 
                axis=1,
                inplace=True) # gets rid of the columns (data features) we don't care about

# gets the tweet into the format we want
def clean_tweet(tweet):
  tweet = BeautifulSoup(tweet, "lxml").get_text() # turns xml-formatted text into regular text
  tweet = re.sub(r"@[A-Za-z0-9]+", " ", tweet) # gets rid of all user references in tweets (i.e. "@username")
  tweet = re.sub(r"https?://[A-Za-z0-9./]+", " ", tweet) # gets rid of URLs
  tweet = re.sub(r"[^A-Za-z.!?']", " ", tweet) # gets rid of any non-standard characters in the tweets
  tweet = re.sub(r" +", " ", tweet) # replaces all excess whitespace with a single space

  return tweet # gives us our cleaned tweet

clean_train_data_1 = [clean_tweet(train_data['text'][i]) for i in range(50001)] # generates cleaned-up training data for 50001 negative sentiment tweets
clean_train_data_2 = [clean_tweet(train_data['text'][i]) for i in range(1550000, 1600000)] # does the same thing for 50000 positive sentiment tweets

# simple function to merge the two lists of tweets together (same func as used in standard MergeSort)
def merge(list1, list2):
  i = 0
  j = 0
  merged_list = []
  while i < len(list1):
    merged_list.append(list1[i])
    i += 1
  while j < len(list2):
    merged_list.append(list2[j])
    j += 1
  return merged_list

clean_train_data = merge(clean_train_data_1, clean_train_data_2) # does the merging

tweets = clean_train_data

training_data_labels = train_data.sentiment.values # fetches the sentiment values from our training dataset 
training_data_labels[training_data_labels == 4] = 1 # changes all the 4s in our sentiment labels to 1s (so now we have polarity represented by either a 0 or a 1)
set(training_data_labels) # outputs the only sentiment values our tweets can take (0 or 1)


training_data_labels_1 = training_data_labels[:50001] # gives us a list of labels for negative sentiment tweets
training_data_labels_2 = training_data_labels[1550000:] # does the same for positive sentiment tweets

# another basic merge function to join the negative and positive tweet labels
def merge(list1, list2):
  i = 0
  j = 0
  merged_list = []
  while i < len(list1):
    merged_list.append(list1[i])
    i += 1
  while j < len(list2):
    merged_list.append(list2[j])
    j += 1
  return merged_list

training_data_labels = merge(training_data_labels_1, training_data_labels_2) # does the merging

sentiments = training_data_labels

# The tokenizer we'll be using for our tweets; documentation: https://huggingface.co/transformers/model_doc/xlmroberta.html
from transformers import XLMRobertaTokenizer

# Load the XLM RoBERTa tokenizer
print('Loading XLM RoBERTa tokenizer . . . ')
tokenizer = XLMRobertaTokenizer.from_pretrained('xlm-roberta-large') # Note that we used the tokenizer from the pretrained large modelâ€”this doesn't conflict with the base model used for training

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

# Print the original sentence.
print(' Original: ', tweets[0])

# Print the sentence split into tokens.
print('Tokenized: ', tokenizer.tokenize(tweets[0]))

# Print the sentence mapped to token ids.
print('Token IDs: ', tokenizer.convert_tokens_to_ids(tokenizer.tokenize(tweets[0])))

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

max_len = 0

# For every sentence...
for tweet in tweets:

    # Tokenize the text and add `[CLS]` and `[SEP]` tokens.
    input_ids = tokenizer.encode(tweet, add_special_tokens=True)

    # Update the maximum sentence length.
    max_len = max(max_len, len(input_ids))

print('Max sentence length: ', max_len)

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

# Tokenize all of the sentences and map the tokens to their word IDs.
input_ids = []
attention_masks = []

# For every sentence...
for tweet in tweets:
    # `encode_plus` will:
    #   (1) Tokenize the sentence.
    #   (2) Prepend the `[CLS]` token to the start.
    #   (3) Append the `[SEP]` token to the end.
    #   (4) Map tokens to their IDs.
    #   (5) Pad or truncate the sentence to `max_length`
    #   (6) Create attention masks for [PAD] tokens.
    encoded_dict = tokenizer.encode_plus(
                        tweet,                      # Sentence to encode.
                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'
                        max_length = 64,           # Pad & truncate all sentences.
                        truncation=True,           # Explicitly enable truncation
                        pad_to_max_length = True,
                        return_attention_mask = True,   # Construct attn. masks.
                        return_tensors = 'pt',     # Return pytorch tensors.
                   )
    
    # Add the encoded sentence to the list.    
    input_ids.append(encoded_dict['input_ids'])
    
    # And its attention mask (simply differentiates padding from non-padding).
    attention_masks.append(encoded_dict['attention_mask'])

# Convert the lists into tensors.
input_ids = torch.cat(input_ids, dim=0)
attention_masks = torch.cat(attention_masks, dim=0)
sentiments = torch.tensor(sentiments)

# Print sentence 0, now as a list of IDs.
print('Original: ', tweets[0])
print('Token IDs:', input_ids[0])

print(input_ids.shape)
print(attention_masks.shape)
print(sentiments.shape)

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

from torch.utils.data import TensorDataset, random_split

# Combine the training inputs into a TensorDataset.
dataset = TensorDataset(input_ids, attention_masks, sentiments)

# Create a 90-10 train-validation split.

# Calculate the number of samples to include in each set.
train_size = int(0.9 * len(dataset))
val_size = len(dataset) - train_size

# Divide the dataset by randomly selecting samples.
train_dataset, val_dataset = random_split(dataset, [train_size, val_size])

print('{:>5,} training samples'.format(train_size))
print('{:>5,} validation samples'.format(val_size))

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

from torch.utils.data import DataLoader, RandomSampler, SequentialSampler

# The DataLoader needs to know our batch size for training, so we specify it 
# here. For fine-tuning BERT on a specific task, the authors recommend a batch 
# size of 16 or 32.
batch_size = 32

# Create the DataLoaders for our training and validation sets.
# We'll take training samples in random order. 
train_dataloader = DataLoader(
            train_dataset,  # The training samples.
            sampler = RandomSampler(train_dataset), # Select batches randomly
            batch_size = batch_size # Trains with this batch size.
        )

# For validation the order doesn't matter, so we'll just read them sequentially.
validation_dataloader = DataLoader(
            val_dataset, # The validation samples.
            sampler = SequentialSampler(val_dataset), # Pull out batches sequentially.
            batch_size = batch_size) # Evaluate with this batch size.

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

from transformers import XLMRobertaForSequenceClassification, AdamW, BertConfig

# Load BertForSequenceClassification, the pretrained BERT model with a single 
# linear classification layer on top. 
model = XLMRobertaForSequenceClassification.from_pretrained(
    "xlm-roberta-base", # Use the large XLM Roberta model.
    num_labels = 2, # The number of output labels--2 for binary classification, 3 for ternary, etc.
                    # You can increase this for multi-class tasks.   
    output_attentions = False, # Whether the model returns attentions weights.
    output_hidden_states = False, # Whether the model returns all hidden-states.
)

# Tell pytorch to run this model on the GPU.
model.cuda()

optimizer = AdamW(model.parameters(),
                  lr = 2e-5, # args.learning_rate - default is 5e-5, our notebook had 2e-5
                  eps = 1e-8 # args.adam_epsilon  - default is 1e-8.
                )

# MOST CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

from transformers import get_linear_schedule_with_warmup

# Number of epochs to train our model for
epochs = 1

# Total number of training steps is [number of batches] x [number of epochs]. 
# (Note that this is not the same as the number of training samples).
total_steps = len(train_dataloader) * epochs

# Create the learning rate scheduler.
scheduler = get_linear_schedule_with_warmup(optimizer, 
                                            num_warmup_steps = 0, # Default value in run_glue.py
                                            num_training_steps = total_steps)

# Used to compute the training/validation/test accuracies
def flat_accuracy(preds, labels):
    pred_flat = np.argmax(preds, axis=1).flatten()
    labels_flat = labels.flatten()
    return np.sum(pred_flat == labels_flat) / len(labels_flat)

import datetime # Just used for keeping track of elapsed time during training

def format_time(elapsed):
    '''
    Takes a time in seconds and returns a string hh:mm:ss
    '''
    # Round to the nearest second.
    elapsed_rounded = int(round((elapsed)))
    
    # Format as hh:mm:ss
    return str(datetime.timedelta(seconds=elapsed_rounded))

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

import random

seed_val = 42

random.seed(seed_val)
np.random.seed(seed_val)
torch.manual_seed(seed_val)
torch.cuda.manual_seed_all(seed_val)

# We'll store a number of quantities such as training and validation loss, 
# validation accuracy, and timings.
training_stats = []

# Measure the total training time for the whole run.
total_t0 = time.time()

# For each epoch...
for epoch_i in range(0, epochs):
    
    # ========================================
    #               Training
    # ========================================
    
    # Perform one full pass over the training set.

    print("")
    print('======== Epoch {:} / {:} ========'.format(epoch_i + 1, epochs))
    print('Training...')

    # Measure how long the training epoch takes.
    t0 = time.time()

    # Reset the total loss for this epoch.
    total_train_loss = 0

    # Put the model into training mode. Don't be misled--the call to 
    # `train` just changes the *mode*, it doesn't *perform* the training.
    # `dropout` and `batchnorm` layers behave differently during training
    # vs. test (source: https://stackoverflow.com/questions/51433378/what-does-model-train-do-in-pytorch)
    model.train()

    # For each batch of training data...
    for step, batch in enumerate(train_dataloader):

        # Progress update every 40 batches.
        if step % 40 == 0 and not step == 0:
            # Calculate elapsed time in minutes.
            elapsed = format_time(time.time() - t0)
            
            # Report progress.
            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))

        # Unpack this training batch from our dataloader. 
        #
        # As we unpack the batch, we'll also copy each tensor to the GPU using the 
        # `to` method.
        #
        # `batch` contains three pytorch tensors:
        #   [0]: input ids 
        #   [1]: attention masks
        #   [2]: labels 
        b_input_ids = batch[0].to(device)
        b_input_mask = batch[1].to(device)
        b_labels = batch[2].to(device)

        # Always clear any previously calculated gradients before performing a
        # backward pass. PyTorch doesn't do this automatically because 
        # accumulating the gradients is "convenient while training RNNs". 
        # (source: https://stackoverflow.com/questions/48001598/why-do-we-need-to-call-zero-grad-in-pytorch)
        model.zero_grad()        

        # Perform a forward pass (evaluate the model on this training batch).
        # The documentation for this `model` function is here: 
        # https://huggingface.co/transformers/v2.2.0/model_doc/bert.html#transformers.BertForSequenceClassification
        # It returns different numbers of parameters depending on what arguments
        # arge given and what flags are set. For our useage here, it returns
        # the loss (because we provided labels) and the "logits"--the model
        # outputs prior to activation.
        loss, logits = model(b_input_ids, 
                             token_type_ids=None, 
                             attention_mask=b_input_mask, 
                             labels=b_labels)


        # Accumulate the training loss over all of the batches so that we can
        # calculate the average loss at the end. `loss` is a Tensor containing a
        # single value; the `.item()` function just returns the Python value 
        # from the tensor.
        total_train_loss += loss.item()

        # Perform a backward pass to calculate the gradients.
        loss.backward()

        # Clip the norm of the gradients to 1.0.
        # This is to help prevent the "exploding gradients" problem.
        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)

        # Update parameters and take a step using the computed gradient.
        # The optimizer dictates the "update rule"--how the parameters are
        # modified based on their gradients, the learning rate, etc.
        optimizer.step()

        # Update the learning rate.
        scheduler.step()

    # Calculate the average loss over all of the batches.
    avg_train_loss = total_train_loss / len(train_dataloader)            
    
    # Measure how long this epoch took.
    training_time = format_time(time.time() - t0)

    print("")
    print("  Average training loss: {0:.2f}".format(avg_train_loss))
    print("  Training epcoh took: {:}".format(training_time))
        
    # ========================================
    #               Validation
    # ========================================
    # After the completion of each training epoch, measure our performance on
    # our validation set.

    print("")
    print("Running Validation...")

    t0 = time.time()

    # Put the model in evaluation mode--the dropout layers behave differently
    # during evaluation.
    model.eval()

    # Tracking variables 
    total_eval_accuracy = 0
    total_eval_loss = 0
    nb_eval_steps = 0

    # Evaluate data for one epoch
    for batch in validation_dataloader:
        
        # Unpack this training batch from our dataloader. 
        #
        # As we unpack the batch, we'll also copy each tensor to the GPU using 
        # the `to` method.
        #
        # `batch` contains three pytorch tensors:
        #   [0]: input ids 
        #   [1]: attention masks
        #   [2]: labels 
        b_input_ids = batch[0].to(device)
        b_input_mask = batch[1].to(device)
        b_labels = batch[2].to(device)
        
        # Tell pytorch not to bother with constructing the compute graph during
        # the forward pass, since this is only needed for backprop (training).
        with torch.no_grad():        

            # Forward pass, calculate logit predictions.
            # token_type_ids is the same as the "segment ids", which 
            # differentiates sentence 1 and 2 in 2-sentence tasks.
            # The documentation for this `model` function is here: 
            # https://huggingface.co/transformers/v2.2.0/model_doc/bert.html#transformers.BertForSequenceClassification
            # Get the "logits" output by the model. The "logits" are the output
            # values prior to applying an activation function like the softmax.
            (loss, logits) = model(b_input_ids, 
                                   token_type_ids=None, 
                                   attention_mask=b_input_mask,
                                   labels=b_labels)
            
        # Accumulate the validation loss.
        total_eval_loss += loss.item()

        # Move logits and labels to CPU
        logits = logits.detach().cpu().numpy()
        label_ids = b_labels.to('cpu').numpy()

        # Calculate the accuracy for this batch of test sentences, and
        # accumulate it over all batches.
        total_eval_accuracy += flat_accuracy(logits, label_ids)
        

    # Report the final accuracy for this validation run.
    avg_val_accuracy = total_eval_accuracy / len(validation_dataloader)
    print("  Accuracy: {0:.2f}".format(avg_val_accuracy))

    # Calculate the average loss over all of the batches.
    avg_val_loss = total_eval_loss / len(validation_dataloader)
    
    # Measure how long the validation run took.
    validation_time = format_time(time.time() - t0)
    
    print("  Validation Loss: {0:.2f}".format(avg_val_loss))
    print("  Validation took: {:}".format(validation_time))

    # Record all statistics from this epoch.
    training_stats.append(
        {
            'epoch': epoch_i + 1,
            'Training Loss': avg_train_loss,
            'Valid. Loss': avg_val_loss,
            'Valid. Accur.': avg_val_accuracy,
            'Training Time': training_time,
            'Validation Time': validation_time
        }
    )

print("")
print("Training complete!")

print("Total training took {:} (h:mm:ss)".format(format_time(time.time()-total_t0)))

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

# Display floats with two decimal places.
pd.set_option('precision', 2)

# Create a DataFrame from our training statistics.
df_stats = pd.DataFrame(data=training_stats)

# Use the 'epoch' as the row index.
df_stats = df_stats.set_index('epoch')

# A hack to force the column headers to wrap.
#df = df.style.set_table_styles([dict(selector="th",props=[('max-width', '70px')])])

# Display the table.
df_stats

# Clearly, the model stops improving significantly after one epoch

# Preparing our test data

test_data.drop(["id", "date", "query", "user"], 
                axis=1,
                inplace=True) # gets rid of the columns (data features) we don't care about

# gets the tweet into the format we want
def clean_tweet(tweet):
  tweet = BeautifulSoup(tweet, "lxml").get_text() # turns xml-formatted text into regular text
  tweet = re.sub(r"@[A-Za-z0-9]+", " ", tweet) # gets rid of all user references in tweets (i.e. "@username")
  tweet = re.sub(r"https?://[A-Za-z0-9./]+", " ", tweet) # gets rid of URLs
  tweet = re.sub(r"[^A-Za-z.!?']", " ", tweet) # gets rid of any non-standard characters in the tweets
  tweet = re.sub(r" +", " ", tweet) # replaces all excess whitespace with a single space

  return tweet # gives us our cleaned tweet

clean_test_data = [clean_tweet(test_data['text'][i]) for i in range(len(test_data))] # Gives us all our cleaned test data

# Creates a list of indices corresponding to neutral-sentiment tweets we want to remove
neutral_list = []
for i in range(len(test_data.sentiment.values)):
    if test_data.sentiment.values[i] == 2:
        neutral_list.append(i)

# Creates a list with only the test data labels we want
new_test_data_sentiments = []
for ind in range(len(test_data.sentiment.values)):
    if ind not in neutral_list:
        new_test_data_sentiments.append(test_data.sentiment.values[ind])

test_data_sentiments = new_test_data_sentiments # Sets our old test labels to the new ones

# Creates a list with only the test tweets we want
new_clean_test_data = []
for ind in range(len(clean_test_data)):
    if ind not in neutral_list:
        new_clean_test_data.append(clean_test_data[ind])

clean_test_data = new_clean_test_data # Sets our old test tweets to the new ones

test_data_labels = test_data_sentiments # Fetches the sentiment values from our training dataset 
test_data_labels[test_data_labels == 4] = 1 # Positive tweets get label 1

# Used this defensively because the dynamic code above sometimes didn't work
for i in range(len(test_data_labels)):
    if test_data_labels[i] == 4:
        test_data_labels[i] = 1

print(set(test_data_labels)) # Should print {0, 1}

test_sentiments = test_data_labels

test_tweets = clean_test_data

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

max_len = 0

# For every sentence...
for tweet in test_tweets:

    # Tokenize the text and add `[CLS]` and `[SEP]` tokens.
    input_ids = tokenizer.encode(tweet, add_special_tokens=True)

    # Update the maximum sentence length.
    max_len = max(max_len, len(input_ids))

print('Max sentence length: ', max_len)

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

# Tokenize all of the sentences and map the tokens to thier word IDs.
test_input_ids = []
test_attention_masks = []

# For every sentence...
for tweet in clean_test_data:
    # `encode_plus` will:
    #   (1) Tokenize the sentence.
    #   (2) Prepend the `[CLS]` token to the start.
    #   (3) Append the `[SEP]` token to the end.
    #   (4) Map tokens to their IDs.
    #   (5) Pad or truncate the sentence to `max_length`
    #   (6) Create attention masks for [PAD] tokens.
    encoded_dict = tokenizer.encode_plus(
                        tweet,                      # Sentence to encode.
                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'
                        max_length = 64,           # Pad & truncate all sentences.
                        truncation=True,           # Explicitly enable truncation
                        pad_to_max_length = True,
                        return_attention_mask = True,   # Construct attn. masks.
                        return_tensors = 'pt',     # Return pytorch tensors.
                   )
    
    # Add the encoded sentence to the list.    
    test_input_ids.append(encoded_dict['input_ids'])
    
    # And its attention mask (simply differentiates padding from non-padding).
    test_attention_masks.append(encoded_dict['attention_mask'])

# Convert the lists into tensors.
test_input_ids = torch.cat(test_input_ids, dim=0)
test_attention_masks = torch.cat(test_attention_masks, dim=0)
test_sentiments = torch.tensor(test_sentiments)

# Print sentence 0, now as a list of IDs.
print('Original: ', test_tweets[0])
print('Token IDs:', test_input_ids[0])

batch_size = 32

print(len(test_input_ids))
print(len(test_sentiments))
print(len(test_attention_masks))

# Create the DataLoader.
prediction_data = TensorDataset(test_input_ids, test_attention_masks, test_sentiments)
prediction_sampler = SequentialSampler(prediction_data)
prediction_dataloader = DataLoader(prediction_data, sampler=prediction_sampler, batch_size=batch_size, drop_last=True)

# CODE AND COMMENTS IN THIS CELL ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

# Prediction on test set

device = torch.device("cuda")

# Puts model into evaluation mode
model.eval()

# Tracking variables 
test_accuracy = 0

# Evaluate data for one epoch
for batch in prediction_dataloader:
    
    b_labels = batch[2].to(device)
    b_input_ids = batch[0].to(device)
    b_input_mask = batch[1].to(device)
    
    # Tell pytorch not to bother with constructing the compute graph during
    # the forward pass, since this is only needed for backprop (training).
    with torch.no_grad():        

        # Forward pass, calculate logit predictions.
        # token_type_ids is the same as the "segment ids", which 
        # differentiates sentence 1 and 2 in 2-sentence tasks.
        # The documentation for this `model` function is here: 
        # https://huggingface.co/transformers/v2.2.0/model_doc/bert.html#transformers.BertForSequenceClassification
        # Get the "logits" output by the model. The "logits" are the output
        # values prior to applying an activation function like the softmax.
        (loss, logits) = model(b_input_ids, 
                               token_type_ids=None, 
                               attention_mask=b_input_mask,
                               labels=b_labels)

    # Accumulate the validation loss.
    total_eval_loss += loss.item()

    # Move logits and labels to CPU
    logits = logits.detach().cpu().numpy()
    label_ids = b_labels.to('cpu').numpy()

    # Calculate the accuracy for this batch of test sentences, and
    # accumulate it over all batches.
    test_accuracy += flat_accuracy(logits, label_ids)

test_accuracy /= len(prediction_dataloader)
print("English test accuracy:", test_accuracy)

# # Saving our model
# torch.save(model.state_dict(), "English_sentiment_model.pt")

# Assessing on Spanish test set


# Reading in our sentiment-labeled test tweets
# Source: https://www.kaggle.com/c/spanish-arilines-tweets-sentiment-analysis/overview/description
features = ["sentiment", "text"]
test_data = pd.read_csv("Data/tweets_public_EDITED.csv", header=None, names=features, engine='python', encoding='UTF-8')

print('Number of tweets in dataset: {:,}\n'.format(test_data.shape[0]))

clean_test_data = [clean_tweet(test_data['text'][i]) for i in range(test_data.shape[0])]  # Cleans our test data

test_tweets = clean_test_data

test_data_labels = test_data.sentiment.values # Fetches the sentiment values from our training dataset 
test_data_labels[test_data_labels == 'positive'] = 1
test_data_labels[test_data_labels == 'negative'] = 0

# Throws out neutral sentiments
neutral_indices = []
new_test_data_labels = []
for i in range(len(test_data_labels)):
    if test_data_labels[i] == 'neutral':
        neutral_indices.append(i)
for j in range(len(test_data_labels)):
    if j not in neutral_indices:
        new_test_data_labels.append(test_data_labels[j])

test_data_labels = new_test_data_labels

test_sentiments = test_data_labels

# Throws out neutral tweets
new_test_tweets = []
for i in range(len(test_tweets)):
    if i not in neutral_indices:
        new_test_tweets.append(test_tweets[i])

test_tweets = new_test_tweets

count0 = 0
count1 = 0
for sent in test_sentiments:
    if sent == 0:
        count0 += 1
    if sent == 1:
        count1 += 1

print(count0, count1) # Count of positive and negative tweets will be uneven

# This time, we are going to even out the number of positive and negative tweets to ensure confidence in our test accuracy measure
# First, we remove the sentiment that is in surplus (negative)
extra_neg_indices = []
i = 0
for j in range(len(test_sentiments)):
    if test_sentiments[j] == 0 and i < (count0 - count1):
        extra_neg_indices.append(j)
        i += 1
    elif i >= (count0 - count1):
        break

# We produce lists of sentiment labels and tweets with an even balance of positive and negative sentiments

new_test_sentiments = []
for i in range(len(test_sentiments)):
    if i not in extra_neg_indices:
        new_test_sentiments.append(test_sentiments[i])

test_sentiments = new_test_sentiments

new_test_tweets = []
for i in range(len(test_tweets)):
    if i not in extra_neg_indices:
        new_test_tweets.append(test_tweets[i])

test_tweets = new_test_tweets

count0 = 0
count1 = 0
for sent in test_sentiments:
    if sent == 0:
        count0 += 1
    if sent == 1:
        count1 += 1

print(count0==count1) # Now, this should print True

# THE FOLLOWING FIVE LINES OF CODE AND COMMENTS ARE ATTRIBUTABLE TO CHRIS MCCORMICK AND NICK RYAN, NOT THE SECONDARY AUTHOR ([NAME REMOVED])

max_len = 0

# For every sentence...
for tweet in test_tweets:

    # Tokenize the text and add `[CLS]` and `[SEP]` tokens.
    test_input_ids = tokenizer.encode(tweet, add_special_tokens=True)

    # Update the maximum sentence length.
    max_len = max(max_len, len(test_input_ids))

print('Max sentence length: ', max_len)

test_sentiments = list(test_sentiments)

# Tokenize all of the sentences and map the tokens to their word IDs.
test_input_ids = []
test_attention_masks = []

# For every sentence...
for tweet in test_tweets:
    # `encode_plus` will:
    #   (1) Tokenize the sentence.
    #   (2) Prepend the `[CLS]` token to the start.
    #   (3) Append the `[SEP]` token to the end.
    #   (4) Map tokens to their IDs.
    #   (5) Pad or truncate the sentence to `max_length`
    #   (6) Create attention masks for [PAD] tokens.
    encoded_dict = tokenizer.encode_plus(
                        tweet,                      # Sentence to encode.
                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'
                        max_length = 64,           # Pad & truncate all sentences.
                        truncation=True,           # Explicitly enable truncation
                        pad_to_max_length = True,
                        return_attention_mask = True,   # Construct attn. masks.
                        return_tensors = 'pt',     # Return pytorch tensors.
                   )
    
    # Add the encoded sentence to the list.    
    test_input_ids.append(encoded_dict['input_ids'])
    
    # And its attention mask (simply differentiates padding from non-padding).
    test_attention_masks.append(encoded_dict['attention_mask'])

# Convert the lists into tensors.
test_input_ids = torch.cat(test_input_ids, dim=0)
test_attention_masks = torch.cat(test_attention_masks, dim=0)
test_sentiments = torch.tensor(test_sentiments)

# Print sentence 0, now as a list of IDs.
print('Original: ', test_tweets[0])
print('Token IDs:', test_input_ids[0])

test_dataset = TensorDataset(test_input_ids, test_attention_masks, test_sentiments)

test_dataloader = DataLoader(
            test_dataset, # The test samples.
            shuffle=True, # shuffle the data
            batch_size = batch_size) # Evaluate with this batch size.

# Prediction on test set

# device = torch.device("cuda")

# Puts model into evaluation mode
model.eval()

total_eval_loss = 0

# Tracking variables 
test_accuracy = 0

# Evaluate data for one epoch
for batch in test_dataloader:
    
    b_labels = batch[2].to(device)
    b_input_ids = batch[0].to(device)
    b_input_mask = batch[1].to(device)
    
    # Tell pytorch not to bother with constructing the compute graph during
    # the forward pass, since this is only needed for backprop (training).
    with torch.no_grad():        

        # Forward pass, calculate logit predictions.
        # token_type_ids is the same as the "segment ids", which 
        # differentiates sentence 1 and 2 in 2-sentence tasks.
        # The documentation for this `model` function is here: 
        # https://huggingface.co/transformers/v2.2.0/model_doc/bert.html#transformers.BertForSequenceClassification
        # Get the "logits" output by the model. The "logits" are the output
        # values prior to applying an activation function like the softmax.
        (loss, logits) = model(b_input_ids, 
                               token_type_ids=None, 
                               attention_mask=b_input_mask,
                               labels=b_labels)

    # Accumulate the validation loss.
    total_eval_loss += loss.item()

    # Move logits and labels to CPU
    logits = logits.detach().cpu().numpy()
    label_ids = b_labels.to('cpu').numpy()

    # Calculate the accuracy for this batch of test sentences, and
    # accumulate it over all batches.
    test_accuracy += flat_accuracy(logits, label_ids)
    
#     pred_flat = np.argmax(logits, axis=1).flatten()
#     labels_flat = b_labels.flatten()

test_accuracy /= len(test_dataloader)
print("Spanish accuracy:", test_accuracy)

# Saving our model
torch.save(model.state_dict(), "XLM_R_ML_sentiment_model.pt")